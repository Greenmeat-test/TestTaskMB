apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-app  # Название деплоймента
  labels:
    app: my-app  # Лейблы для идентификации
spec:
  replicas: 4  # Начальное количество реплик
  selector:
    matchLabels:
      app: my-app  # Селектор для выбора подов по лейблам
  template:
    metadata:
      labels:
        app: my-app  # Лейблы для подов
    spec:
      containers:
      - name: my-app
        image: my-app:latest  # Docker образ приложения
        ports:
        - containerPort: 8080  # Порт, на котором приложение слушает
        resources:
          limits:
            cpu: "0.5"  # Максимальное потребление CPU на под
            memory: "128Mi"  # Максимальное потребление памяти на под
          requests:
            cpu: "0.1"  # Начальное потребление CPU на под
            memory: "128Mi"  # Начальное потребление памяти на под
        readinessProbe:
          httpGet:
            path: /healthz  # Путь для проверки готовности приложения
            port: 8080
          initialDelaySeconds: 10  # Задержка перед первой проверкой
          periodSeconds: 5  # Периодичность проверок
        livenessProbe:
          httpGet:
            path: /healthz  # Путь для проверки живости приложения
            port: 8080
          initialDelaySeconds: 60  # Задержка перед первой проверкой
          periodSeconds: 20  # Периодичность проверок
        env:
        - name: MY_APP_ENV_VAR
          value: my-value  # Переменная окружения приложения
      nodeSelector:
        beta.kubernetes.io/type: worker  # Выбор только worker узлов
      tolerations:
      - key: "node-role.kubernetes.io/worker"
        operator: "Exists"
        effect: "NoSchedule"  # Позволяет поду запускаться на узлах с любыми тэгами
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - my-app
            topologyKey: "kubernetes.io/hostname"  # Размещаем поды на разных узлах для отказоустойчивости

# HPA (Horizontal Pod Autoscaler) для автоматического масштабирования
apiVersion: autoscaling/v2beta2
kind: HorizontalPodAutoscaler
metadata:
  name: my-app-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: my-app  # Ссылка на целевой деплоймент
  minReplicas: 2  # Минимальное количество реплик
  maxReplicas: 16  # Максимальное количество реплик
  metrics:
  - type: Resource
    resource:
      name: cpu
      targetAverageUtilization: 50  # Целевая загрузка CPU в процентах

# CronJob для планирования масштабирования в определенное время
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: my-app-scheduled-scaling
spec:
  schedule: "0 0 * * *"  # Каждый день в 00:00 UTC
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: scaler
            image: your-scaler-image:latest  # Docker образ с утилитой для изменения количества реплик
            command: ["/bin/sh"]
            args: ["-c", "kubectl scale deployment my-app --replicas=2"]  # Уменьшить количество реплик до 2
